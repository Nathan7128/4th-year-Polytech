// Parameters
real cpu=clock();
int C1=99;


// Mesh



border C11(t=0., 1.){x=0.; y=1-t; label=C1;}
border C12(t=0., 1.){x=1-t; y=1.; label=C1;}
border C13(t=0., 1.){x=1.; y=t; label=C1;}
border C14(t=0., 1.){x=t; y=0.; label=C1;}
border C0(t=0., 2.*pi){x=0.3*cos(-t)+0.5; y=0.3*sin(-t)+0.5;}

plot( C0(50)+ C11(10)+C12(10)+C13(10)+C14(10),wait=true, ps="heatexb.eps");

mesh Th=buildmesh(C0(50)+ C11(10)+C12(10)+C13(10)+C14(10));

plot(Th,wait=1);


//Fonction de x et y
func f =1;

// Definition de l'espace des elements finis P1 associe au maillage Th
fespace Vh(Th, P2);
cout << "temps CPU apres def du maillage = " << (clock()-cpu) << endl;

//uh et ch sont des elements de Vh
Vh uh, vh;

// Definition du pb variationnel
problem laplacien(uh, vh, solver = LU)=int2d(Th)(dx(uh)*dx(vh)+dy(uh)*dy(vh))-int2d(Th)(f*vh)+ on(C1,uh=1) + on(5,uh=0);
cout << "temps CPU apres def du pb var = " << (clock()-cpu) <<endl;

//Resolution du pb
laplacien;
cout << "temps CPU apres resolution = " <<(clock()-cpu) << endl;

//Calcul erreur
func u = x*(1.0-x)*y*(1.0-y);
Vh error = u-uh;

real errL2 = sqrt(int2d(Th)(error^2));
real errH1 = sqrt(int2d(Th)(error^2+dx(error)^2+dy(error)^2));
cout << "erreur L2"<< errL2 << endl;
cout << "erreur H1"<< errH1 << endl;

//On visualise le maillage et le resultat
plot(Th, wait = true, ps="mesh.eps");
plot(uh, wait = true);