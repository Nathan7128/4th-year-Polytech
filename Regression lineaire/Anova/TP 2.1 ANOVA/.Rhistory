return ((x <= 1)*(x >=0))
}
f = function(x){
return((x <= 1)*(x >=0)*2*x)
}
print(rejet(1, tirage_h, h, 10, f))$i
rejet = function(L, tirage_h, h, A, f){
compt = 0
accept = 0
I = rep(0, L)
while (accept < L){
compt = compt + 1
u = runif(1)
x = tirage_h()
if (f(x)/(A*h(x)) >= u){
accept = accept + 1
I[accept] = x
}
}
return(list(iteration = compt, I = I))
}
tirage_h = function(){
return (runif(1))
}
h = function(x){
return ((x <= 1)*(x >=0))
}
f = function(x){
return((x <= 1)*(x >=0)*2*x)
}
print(rejet(1, tirage_h, h, 10, f))$iteration
rejet = function(L, tirage_h, h, A, f){
compt = 0
accept = 0
I = rep(0, L)
while (accept < L){
compt = compt + 1
u = runif(1)
x = tirage_h()
if (f(x)/(A*h(x)) >= u){
accept = accept + 1
I[accept] = x
}
}
return(list(iteration = compt, I = I))
}
tirage_h = function(){
return (runif(1))
}
h = function(x){
return ((x <= 1)*(x >=0))
}
f = function(x){
return((x <= 1)*(x >=0)*2*x)
}
print(rejet(1, tirage_h, h, 10, f)$iteration)
rejet = function(L, tirage_h, h, A, f){
compt = 0
accept = 0
I = rep(0, L)
while (accept < L){
compt = compt + 1
u = runif(1)
x = tirage_h()
if (f(x)/(A*h(x)) >= u){
accept = accept + 1
I[accept] = x
}
}
return(list(iteration = compt, I = I))
}
tirage_h = function(){
return (runif(1))
}
h = function(x){
return ((x <= 1)*(x >=0))
}
f = function(x){
return((x <= 1)*(x >=0)*2*x)
}
Z = rejet(10000, tirage_h, h, 2, f)
I = Z$I
i = Z$iteration
par(mfrow=c(1, 1))
hist(Z)
rejet = function(L, tirage_h, h, A, f){
compt = 0
accept = 0
I = rep(0, L)
while (accept < L){
compt = compt + 1
u = runif(1)
x = tirage_h()
if (f(x)/(A*h(x)) >= u){
accept = accept + 1
I[accept] = x
}
}
return(list(iteration = compt, I = I))
}
tirage_h = function(){
return (runif(1))
}
h = function(x){
return ((x <= 1)*(x >=0))
}
f = function(x){
return((x <= 1)*(x >=0)*2*x)
}
Z = rejet(10000, tirage_h, h, 2, f)
I = Z$I
i = Z$iteration
par(mfrow=c(1, 1))
print(i)
hist(I)
# méthode de rejet
tirage_h <- function() { # 1 tirage aléatoire selon la loi définie par h
return( runif(1))
}
h <- function(x) { # calcul de la fonction h(x)
r = (x>=0)*(x<=1) # = 1 si 0 <= x <= 1, =0 sinon
return(r)
}
f <- function(x) { # la fonction de densité f(x) selon laquelle nous aimerions tirer des valeurs
r = 2*x*(x>=0)*(x<=1)
return(r)
}
methode_rejet <- function(L, A, tirage_h, h, f) {
nb_val_acceptees = 0
tirages = rep(0, L)
i = 0
while(nb_val_acceptees < L) { # tant que L valeurs n'ont pas été acceptées
i = i + 1
# 1) tirage de X
X = tirage_h()
# 2) tirage de U
U = runif(1)
# test
g_X = A*h(X)
if( f(X)/g_X >= U) { # tirage accepté
nb_val_acceptees = nb_val_acceptees + 1
tirages[nb_val_acceptees] = X
}
}
print(i)
return(tirages)
}
Z = methode_rejet(10000, 2, tirage_h, h, f)
par(mfrow=c(1, 1))
hist(Z)
help(mass)
??mass
install.packages("MASS")
help(mass)
help(MASS)
knitr::opts_chunk$set(echo = TRUE)
sigma2 = matrix(c(c(1, 0.5), c(0.5, 0.7)))
mu1 = c(10, 0)
```{r}
pi = (0.7, 0.3)
pi = c(0.7, 0.3)
mu1 = c(10, 0)
mu2 = c(2, 2)
sigma1 = matrix(c(c(1, 0.2), c(0.2, 1)))
sigma2 = matrix(c(c(1, 0.5), c(0.5, 0.7)))
View(sigma1)
pi = c(0.7, 0.3)
mu1 = c(10, 0)
mu2 = c(2, 2)
sigma1 = matrix(c(1, 0.2, 0.2, 1), nrow = 2)
sigma2 = matrix(c(1, 0.5, 0.5, 0.7), nrow = 2)
View(sigma1)
View(sigma2)
n = 100
Z = rmultinom(n, pi)
Z = rmultinom(n, K, pi)
n = 100
K = 2
Z = rmultinom(n, K, pi)
Z = rmultinom(n, K, pi)
Z
View(Z)
Z = rmultinom(n, 1, pi)
Z
Z = rmultinom(n, 1, pi)
Z = rmultinom(n, 1, pi)
Z[:10]
View(Z)
View(Z)
Z = rmultinom(n, 1, pi)
Z[, 1:10]
Z = rmultinom(n, 1, pi)
Z = t(Z)
Z[, 1:10]
Z = rmultinom(n, 1, pi)
Z = t(Z)
Z[1:10, ]
Z = rmultinom(n, 1, pi)
Z = t(Z)
Z[1:10, ]
N_k = colSums(Z)
N_k
X1 = MASS::mvrnorm(n = N_k[1], mu = mu1, Sigma = sigma1)
X2 = MASS::mvrnorm(n = N_k[2], mu = mu2, Sigma = sigma2)
X1
X2
Z = rmultinom(n, 1, pi)
Z = t(Z)
Z[1:5, ]
N_k = colSums(Z)
N_k
X1 = MASS::mvrnorm(n = N_k[1], mu = mu1, Sigma = sigma1)
X2 = MASS::mvrnorm(n = N_k[2], mu = mu2, Sigma = sigma2)
X1[1:5, ]
X2[1:5, ]
rbind(X1, X2)
rep("blue", 50)
rep("blue", 50) + rep("red", 50)
plot(rbind(X1, X2), color = c(rep("blue", 50), rep("red", 50)))
plot(rbind(X1, X2), color = c(rep("blue", 50), rep("red", 50)), pch = 16,
xlab = "X1", ylab = "X2")
plot(rbind(X1, X2), col = c(rep("blue", 50), rep("red", 50)), pch = 16,
xlab = "X1", ylab = "X2")
plot(rbind(X1, X2), col = c(rep("blue", 50), rep("red", 50)),
xlab = "X1", ylab = "X2")
plot(rbind(X1, X2), col = c(rep("blue", 50), rep("red", 50)), pch = 16,
xlab = "X1", ylab = "X2")
X = matrix(0, nrow = N, ncol = D)
X = matrix(0, nrow = n, ncol = D)
X = matrix(0, nrow = n, ncol = K)
X[Z[, 1] == 1, ] = X1
X[Z[, 2] == 1, ] = X2
x1min = min(X[,1])
x1max = max(X[,1])
x2min = min(X[,2])
X = matrix(0, nrow = n, ncol = K)
X[Z[, 1] == 1, ] = X1
X[Z[, 2] == 1, ] = X2
x1min = min(X[,1])
x1max = max(X[,1])
x2min = min(X[,2])
plot(X1, col='red', xlim=c(x1min, x1max), ylim = c(x2min, x2max))
X = matrix(0, nrow = n, ncol = K)
X[Z[, 1] == 1, ] = X1
X[Z[, 2] == 1, ] = X2
x1min = min(X[,1])
x1max = max(X[,1])
x2min = min(X[,2])
x2max = max(X[, 2])
plot(X1, col='red', xlim=c(x1min, x1max), ylim = c(x2min, x2max))
points(X2, col='blue')
?(Mclust)
help(mclust)
help(Mclust)
install.packages("mclust")
help(mclust)
knitr::opts_chunk$set(echo = TRUE)
library(mclust)
data("diabetes")
str(diabetes)
library(mclust)
data("diabetes")
str(diabetes)
summary(diabetes)
library(mclust)
data("diabetes")
str(diabetes)
cat("\n\n")
summary(diabetes)
X = diabetes[, -1]
View(diabetes)
View(X)
X = diabetes[, -1]
dim(X)
help(Mclust)
res = Mclust(X, G = 3)
summary(res, parameters = TRUE)
plot(res)
res = Mclust(X, G = 3)
summary(res, parameters = TRUE)
plot(res, what = "uncertainty")
res = Mclust(X, G = 3)
summary(res, parameters = TRUE)
plot(res, what = "uncertainty")
plot(res)
res = Mclust(X, G = 3)
summary(res, parameters = TRUE)
plot(res, what = "uncertainty")
plot(res, what = "BIC")
plot(res, what = "classification")
plot(res, what = "density")
res = Mclust(X, G = 3)
summary(res, parameters = TRUE)
plot(res, what = "uncertainty")
plot(res, what = "classification")
plot(res, what = "density")
res = Mclust(X, G = 3)
summary(res, parameters = TRUE)
plot(res, what = "uncertainty")
res2 = Mclust(X, G = 1:18)
plot(res2, what = "BIC")
resBIC = mclustBIC(X, G = 1:18)
plot(resBI)
resBIC = mclustBIC(X, G = 1:18)
plot(resBIC)
setwd('C:\\Users\\natha\\Documents\\Programmation\\Git\\4th-year-Polytech\\Regression lineaire\\Anova\\TP 2.1 ANOVA')
getwd()
dir()
load("canard.Rdata")
attach(canard)
names(canard)
#poids = poids du foie du canard
# alim= choix de l'alimentation'dose de espece (qualitatif)
# espece = espece de canard
head(canard,15)
dim(canard)
summary(canard)
levels(alim)
levels(espece)
#permet de voir si c'est un plan complet �quilibr�.
table(alim,espece)
# pour voir le caract�re des variables
str(canard)
# ---------------------------
# Analyse descriptive
# ---------------------------
library(ggplot2)
ggplot(data=canard, aes(x=alim:espece,y=poids)) +
geom_boxplot()  # alpha= taux de transparence
ggplot(data=canard, aes(x=alim:espece,y=poids)) +
geom_boxplot(color="blue",fill="red",alpha=0.2)  # alpha= taux de transparence
# variante par espece
ggplot(canard, aes(x=alim,y=poids,fill=espece)) +
geom_boxplot(color="blue",alpha=0.2)
# variante par violin (plus pr�cis qu boxplot)
ggplot(canard, aes(x=alim,y=poids,fill=espece)) +
geom_violin(color="blue",alpha=0.2)
# boxplot avec les fonctions de base R
boxplot(poids~alim:espece,
data = canard,
xlab = "alimentation x esp�ce",
ylab = "poids")
# ---------------------------
# mod�le d'ANOVA
# ---------------------------
model <- lm(poids ~ espece + alim + espece:alim)
# autre syntaxe equivalent model <- lm(poids ~ espece * alim)
summary(model)
levels(alim)
levels(espece)
# ---------------------------
# mod�le d'ANOVA
# ---------------------------
library(car)
model <- lm(poids ~ espece:alim + alim + espece)
# Attention : ne pas utiliser la commande anova()
# autre syntaxe equivalent model <- lm(poids ~ espece * alim)
Anova(model)
levels(alim)
levels(espece)
library(car)
# test de levene library(car)  Ho: "il n'y a pas h�t�roscedasticit� "
leveneTest(poids~espece*alim,data=canard)
plot(jitter(model$fit),model$res,xlab="Fitted",ylab="Residuals",main="Jittered plot")
# ---------------------------
# Etude des r�sidus
# ---------------------------
# graphe des r�sidus
plot(model,1)
# regardons la normalit� des r�sidus
plot(model,2)
library(car)
# qq plot
qqPlot(model, main="QQ Plot") #qq plot for studentized resid
# test de normalit� de Shapiro Wilks
# H0 : les r�sidus sont normaux
shapiro.test(residuals(model))
setwd('C:\\Users\\natha\\Documents\\Programmation\\Git\\4th-year-Polytech\\Regression lineaire\\Anova\\TP 2.1 ANOVA')
getwd()
dir()
load("canard.Rdata")
attach(canard)
names(canard)
#poids = poids du foie du canard
# alim= choix de l'alimentation'dose de espece (qualitatif)
# espece = espece de canard
head(canard,15)
dim(canard)
summary(canard)
levels(alim)
levels(espece)
#permet de voir si c'est un plan complet �quilibr�.
table(alim,espece)
# pour voir le caract�re des variables
str(canard)
# ---------------------------
# Analyse descriptive
# ---------------------------
library(ggplot2)
ggplot(data=canard, aes(x=alim:espece,y=poids)) +
geom_boxplot()  # alpha= taux de transparence
ggplot(data=canard, aes(x=alim:espece,y=poids)) +
geom_boxplot(color="blue",fill="red",alpha=0.2)  # alpha= taux de transparence
# variante par espece
ggplot(canard, aes(x=alim,y=poids,fill=espece)) +
geom_boxplot(color="blue",alpha=0.2)
# variante par violin (plus pr�cis qu boxplot)
ggplot(canard, aes(x=alim,y=poids,fill=espece)) +
geom_violin(color="blue",alpha=0.2)
# boxplot avec les fonctions de base R
boxplot(poids~alim:espece,
data = canard,
xlab = "alimentation x esp�ce",
ylab = "poids")
# ---------------------------
# mod�le d'ANOVA
# ---------------------------
model <- lm(poids ~ espece + alim + espece:alim)
# autre syntaxe equivalent model <- lm(poids ~ espece * alim)
summary(model)
levels(alim)
levels(espece)
# ---------------------------
# mod�le d'ANOVA
# ---------------------------
library(car)
model <- lm(poids ~ espece:alim + alim + espece)
# Attention : ne pas utiliser la commande anova()
# autre syntaxe equivalent model <- lm(poids ~ espece * alim)
Anova(model)
levels(alim)
levels(espece)
# ---------------------------
# Etude des r�sidus
# ---------------------------
# graphe des r�sidus
plot(model,1)
plot(jitter(model$fit),model$res,xlab="Fitted",ylab="Residuals",main="Jittered plot")
library(car)
# test de levene library(car)  Ho: "il n'y a pas h�t�roscedasticit� "
leveneTest(poids~espece*alim,data=canard)
# regardons la normalit� des r�sidus
plot(model,2)
library(car)
# qq plot
qqPlot(model, main="QQ Plot") #qq plot for studentized resid
# test de normalit� de Shapiro Wilks
# H0 : les r�sidus sont normaux
shapiro.test(residuals(model))
# ---------------------------
# test des effets principaux et de l'interaction
# ---------------------------
# R�gle : on commence toujours par regarder l'interaction.
# Si l'interaction est significative, on ne regarde pas les effets principaux
# Si l'interaction n'est pas significative, on peut regarder les effets principaux
# Ici l'interaction est significativei,i.e. il y a interaction entre les deux facteurs
# ------------------------------------------------
# �tude d�taill�e des effets, graphe d'interaction
# ------------------------------------------------
library(emmeans)
# graphe d'interaction
emmip(model, espece ~ alim)
emmip(model, alim ~ espece)  # graphe permut�
# meilleure combinaison canard=gris et alimentation = 2
# emmeans des interactions  + comparaison par paires
# emmeans(model, pairwise ~ espece:alim)
# meilleure combinaison canard=gris et alimentation = 2
# mais canard rouen et alimentation 3 n'est pas significativement diff�rent.
# --------------------------------------------------------
# effet global d'un facteur par niveau de l'autre facteur
# --------------------------------------------------------
# effet de espece en fonction de alim
joint_tests(model, by = "alim")
# effet de alim en fonction de espece
joint_tests(model, by = "espece")
# -------------------------
# Erreur � ne pas commettre
# -------------------------
# Si on n'avait pas mis d'interaction dans le mod�le :
modelFaux <- lm(poids ~ espece + alim)
# autre syntaxe equivalent model <- lm(poids ~ espece * alim)
emmip(modelFaux, espece ~ alim)
# ici la meilleure combinaison est canard gris alim 3
# alors qu'on a vu que c'�tait gris, alim2
Anova(modelFaux)
# ---------------------------
# Etude des r�sidus
# ---------------------------
# graphe des r�sidus
plot(model,1)
plot(jitter(model$fit),model$res,xlab="Fitted",ylab="Residuals",main="Jittered plot")
# ---------------------------
# Etude des r�sidus
# ---------------------------
# graphe des r�sidus
plot(model,1)
# regardons la normalit� des r�sidus
plot(model,2)
plot(jitter(model$fit),model$res,xlab="Fitted",ylab="Residuals",main="Jittered plot")
# ---------------------------
# Etude des r�sidus
# ---------------------------
# graphe des r�sidus
plot(model,1)
# regardons la normalit� des r�sidus
plot(model,2)
# qq plot
qqPlot(model, main="QQ Plot") #qq plot for studentized resid
# regardons la normalit� des r�sidus
plot(model,2)
# qq plot
qqPlot(model, main="QQ Plot") #qq plot for studentized resid
